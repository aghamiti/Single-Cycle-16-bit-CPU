
module CU(
    input [3:0] OPCODE,
    output reg RegDst,
    output reg Branch,
    output reg MemRead,
    output reg MemToReg,
    output reg[1:0] ALUOp,
    output reg MemWrite,
    output reg ALUSrc,
    output reg RegWrite
);

  always @ (OPCODE)
begin
    
  case(OPCODE)
  	4'b0000: 
	
          begin
        RegDst = 1;ALUSrc = 0;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1;ALUOp[0] = 0;
          Branch = 0; 
          end
 		


	4'b0001: 
		
          begin
        RegDst = 1;ALUSrc = 0;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1;ALUOp[0] = 0;
          Branch = 0;
           
          end


	4'b1001:// ADDI
            begin
        RegDst = 0;ALUSrc = 1;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1;ALUOp[0] = 1;
    	  Branch = 0;
              end
        
	4'b1010: // SUBI
              begin
	    RegDst = 0;ALUSrc = 1;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1;ALUOp[0] = 1;
    	  Branch = 0;
                end

	4'b1011: // SLTI
                begin
		RegDst = 0;ALUSrc = 1;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1;ALUOp[0] = 1;
    	  Branch = 0;    
                  end

	4'b1100: // LW
                  begin
		RegDst = 0;ALUSrc = 1;MemToReg = 1;RegWrite = 1;MemRead = 1;MemWrite = 0;ALUOp[1] = 0;ALUOp[0] = 0;
    	  Branch = 0;
                    end
    4'b1101: // SW
                    begin
		RegDst = 0;ALUSrc = 1;MemToReg = 0;RegWrite = 0;MemRead = 0;MemWrite = 1;ALUOp[1] = 0;ALUOp[0] = 0;
    	  Branch = 0;
                      end
        
    4'b1111: // BEQ
                      begin
		RegDst = 0;ALUSrc = 0;MemToReg = 0;RegWrite = 0;MemRead = 0;MemWrite = 0;ALUOp[1] = 0;ALUOp[0] = 1;
    	  Branch = 1;
                        end
	
    4'b0010:
		
              begin
        		RegDst = 0;ALUSrc = 1'bX;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1;
          		  ALUOp[0] = 0;Branch = 0;
                end
		
		
	endcase
end

endmodule


Testimi:

module CU_testim;
  reg [3:0] OPCODE_test;
    wire RegDst_test;
    wire Branch_test;
    wire MemRead_test;
    wire MemToReg_test;
  wire [1:0] ALUOp_test;
    wire MemWrite_test;
    wire ALUSrc_test;
    wire RegWrite_test;
  
  
  
  initial
    $monitor("OPCODE=%b, RegDst=%b, Branch=%b, MemRead=%b, MemToReg=%b, ALUOp=%b, MemWrite=%b, ALUSrc=%b, RegWrite=%b", OPCODE_test, RegDst_test, Branch_test, MemRead_test, MemToReg_test, ALUOp_test, MemWrite_test, ALUSrc_test, RegWrite_test);
  
 initial
  begin
    #0	OPCODE_test=4'b0000; 
    #10	OPCODE_test=4'b0000; 
    #10	OPCODE_test=4'b0000; 
    #10	OPCODE_test=4'b0001; 
    #10	OPCODE_test=4'b0001; 
    #10	OPCODE_test=4'b1001; 
    #10	OPCODE_test=4'b1010; 
    #10	OPCODE_test=4'b1011; 
    #10	OPCODE_test=4'b1100; 
    #10	OPCODE_test=4'b1101; 
    #10	OPCODE_test=4'b1111; 
    #10	OPCODE_test=4'b0010; 
    #10	OPCODE_test=4'b0010; 
    
    
    #10 $stop;
  end
  
  CU CU_test(
    .OPCODE(OPCODE_test),
    .RegDst(RegDst_test),
    .Branch(Branch_test),
    .MemRead(MemRead_test),
    .MemToReg(MemToReg_test),
    .ALUOp(ALUOp_test),
    .MemWrite(MemWrite_test),
    .ALUSrc(ALUSrc_test),
    .RegWrite(RegWrite_test));
endmodule