//Hyrje ne CPU - CLock CPU_IN_1
module CPU(input Clock);

//TELAT E BRENDSHEM TE CPU, SHIH CPU.PDF
wire [3:0] opcode; //D_OUT_1
//CU_OUT_x
wire RegDst, Branch, MemRead, MemWrite, RegWrite, MemToReg, ALUSrc;
wire [1:0] ALUOp;

//inicializimi i Datapath    
Datapath DP(Clock,RegDst, Branch, MemRead, MemWrite, RegWrite, MemToReg, ALUSrc,ALUOp,opcode);

//Inicializimi i COntrol Unit
CU ControlUnit(opcode,
RegDst, 
Branch, 
MemRead, 
MemToReg,
ALUOp,
MemWrite, 
ALUSrc,
RegWrite
);

endmodule

module mb16b(
    input[15:0] A,
    input[15:0] B,
    output[15:0] result,
    output CarryOut
    );
    wire [14:0] COUT;
Mbledhesi MBLEDHESI0(A[0], B[0],1'b0, result[0], COUT[0]);
Mbledhesi MBLEDHESI1(A[1], B[1], COUT[0],result[1], COUT[1]);
Mbledhesi MBLEDHESI2(A[2], B[2], COUT[1],result[2], COUT[2]);
Mbledhesi MBLEDHESI3(A[3], B[3], COUT[2],result[3], COUT[3]);
Mbledhesi MBLEDHESI4(A[4], B[4], COUT[3],result[4], COUT[4]);
Mbledhesi MBLEDHESI5(A[5], B[5], COUT[4],result[5], COUT[5]);
Mbledhesi MBLEDHESI6(A[6], B[6], COUT[5],result[6], COUT[6]);
Mbledhesi MBLEDHESI7(A[7], B[7], COUT[6],result[7], COUT[7]);
Mbledhesi MBLEDHESI8(A[8], B[8], COUT[7],result[8], COUT[8]);
Mbledhesi MBLEDHESI9(A[9], B[9], COUT[8],result[9], COUT[9]);
Mbledhesi MBLEDHESI10(A[10], B[10], COUT[9],result[10], COUT[10]);
Mbledhesi MBLEDHESI11(A[11], B[11], COUT[10],result[11], COUT[11]);
Mbledhesi MBLEDHESI12(A[12], B[12], COUT[11],result[12], COUT[12]);
Mbledhesi MBLEDHESI13(A[13], B[13], COUT[12],result[13], COUT[13]);
Mbledhesi MBLEDHESI14(A[14], B[14], COUT[13],result[14], COUT[14]);
Mbledhesi MBLEDHESI15(A[15], B[15], COUT[14],result[15], CarryOut);
  
endmodule

module Datapath(
input Clock, //HYRJE NGA CPU - TELI CPU_IN_1
input RegDst, Branch, MemRead, 
MemWrite, RegWrite, MemToReg, ALUSrc, //HYRJET NGA CU - TELAT CU_OUT_x
input [1:0] ALUOp, //HYRJE NGA CU - TELAT CU_OUT_x
output [3:0] opcode //DALJE PER NE CU - TELI D_OUT_1
);

//SHIKO FOTO DATAPATH.PDF
reg[15:0] pc_initial; // Regjistri PC
wire [15:0] pc_next, pc4, pcbeq; //TELAT: T1, T2, T3, T4
wire [15:0] instruction; //TELI T5
wire [1:0] mux_regfile; //TELI T6
wire[15:0] readData1, readData2, writeData, //TELAT T7-T9 
mux_ALU, ALU_Out, Zgjerimi, memToMux, //TELAT T10-T13
shifter2beq, branchAdderToMux, beqAddress; //TELAT T14-T18 
wire[3:0] ALUCtrl; //TELI T19
wire zerof, overflow, carryout; // TELAT T20-T22
wire andMuxBranch; //TELI T23

initial
begin
    pc_initial = 16'd10; //inicializimi fillesat i PC ne adresen 10
end

always@(posedge Clock)
begin
  pc_initial <= pc_next; //azhurimi i PC ne cdo teh pozitiv me adresen e ardhshme
  
    
end

//T2 - PC rritet per 4 (ne sistemet 32 biteshe) per te gjitha instruksionet pervec BEQ, BNE, JUMP
//assign pc4 = pc_initial + 2; 
  wire pcCout;
  mb16b pc_iteruesi(pc_initial, 16'd2, pc4, pcCout); //inicializimi fillesat i PC ne adresen 10 Mbledhesi AddSubFunct(A, mB, CIN, addsub_teli, CarryOut);


 
  
//T14 - pergatitja e adreses per kercim ne BEQ (164 bit si MSB, 16 bit nga pjesa imediate, 2 bit shtyrje majtas (x4) 
assign shifter2beq = {{7{instruction[7]}}, instruction[7:0], 1'b0};
 

//Instr mem //inicializimi i IM (PC adresa hyrje, teli instruction dajle)
InstructionMemory IM(pc_initial, instruction); 

//T6 - Percaktimi nese RD eshte RD (te R-formati) apo RD = RT (te I-formati) - MUX M1 ne foto
assign mux_regfile = (RegDst == 1'b1) ? instruction[7:6] : instruction[9:8]; 

// T12 - Zgjerimi nga 16 ne 32 bit - 16 bit si MSB dhe pjesa e instruction[15:0] - S1 ne foto
assign Zgjerimi = {{8{instruction[7]}}, instruction[7:0]};  

//REGFILE
//inicializimi i RF(RS, RT, T6 (RD[RD=RD || RD=RT]), T9, CU_OUT_x, CPU_IN_1, T7, T8)
RegisterFile RF(instruction[11:10], instruction[9:8], mux_regfile, writeData, RegWrite, Clock, readData1, readData2); 

// T10 - Percaktimi nese hyrja e MUX-it M2 para ALU eshte Regjstri 2 i RF apo vlera imediate e instruksionit 
assign mux_ALU = (ALUSrc == 1'b1) ? Zgjerimi : readData2; 

//inicializimi i ALU Control (CU_OUT_x, Function Code nga R-formati, Opcode, T19) - eshte shtuar ALUOp per I-format qe nuk eshte ne foto po kerkohet ne detyre 
ALUControl AC(ALUOp, instruction[1:0], instruction[15:12], ALUCtrl);

//inicializimi i ALU (T7, T10, T19[3], T19[2], T19[1:0], T20, T11, T21, T22)
ALU16 ALU(readData1, mux_ALU, ALUCtrl[3], ALUCtrl[2:0], zerof, ALU_Out, overflow, carryout);

DataMemory DM(ALU_Out, readData2, MemWrite, MemRead, Clock, memToMux);
  
assign writeData = (MemToReg == 1'b1) ? memToMux : ALU_Out;

//T23 - Teli qe del nga porta DHE ne pjesen e eperme te fotos (shikon nese plotesohet kushti per BEQ

assign andMuxBranch = zerof & Branch;
  

//T17, Teli qe mban adresen ne te cilen do te kercej programi kur kushti BEQ plotesohet
assign beqAddress = pc4 + shifter2beq; 

//T3 - Teli qe del nga Mux M4 ne foto qe kontrollon nese kemi BEQ apo PC+4
assign pc_next = (andMuxBranch == 1'b1) ? beqAddress : pc4;


//Teli D_OUT_1 qe i dergohet CU
assign opcode = instruction[15:12];

endmodule
              
              
              
module ALUControl(
    input [1:0] ALUOp,
    input [1:0] funct,
    input [3:0] OPCODE,
    output reg [3:0] ALUCtrl
);

  always @(ALUOp,funct,OPCODE)
begin
    case(ALUOp)
      	2'b00: ALUCtrl = 4'b0100; // LW+SW (mbledhje) 0010
      	2'b01: ALUCtrl = 4'b1100; // BEQ+BNE (zbritje) 0110
        2'b10: // R-Format
            case(OPCODE)

                4'b0000:
                    case(funct)
                        2'b00: ALUCtrl = 4'b0000;  //AND
                        2'b01: ALUCtrl = 4'b0010;  //OR
                        2'b10: ALUCtrl = 4'b0011;  //XOR
                    endcase
                4'b0001:
                    case(funct)
                        2'b00: ALUCtrl = 4'b0100;  //ADD
                        2'b01: ALUCtrl = 4'b1100;  //SUB
                    endcase
                4'b0010:
                    case(funct)
                        2'b00: ALUCtrl = 4'b0110;  //SLL
                        2'b01: ALUCtrl = 4'b0111;  //SRA
                    endcase
            endcase

        2'b11: // I-Format
            case(OPCODE)
                4'b1001: ALUCtrl = 4'b0100; // ADDI
                4'b1010: ALUCtrl = 4'b1100; //SUBI
                4'b1011: ALUCtrl = 4'b0001; //SLTI
            endcase
    endcase
end
endmodule
              


module CU(
    input [3:0] OPCODE,
    output reg RegDst,
    output reg Branch,
    output reg MemRead,
    output reg MemToReg,
    output reg[1:0] ALUOp,
    output reg MemWrite,
    output reg ALUSrc,
    output reg RegWrite
);

  always @ (OPCODE)
begin
    
  case(OPCODE)
  	4'b0000: 
	
          begin
        RegDst = 1;ALUSrc = 0;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1;ALUOp[0] = 0;Branch = 0; 
          end
 		


	4'b0001: 
		
          begin
        RegDst = 1;ALUSrc = 0;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1;ALUOp[0] = 0; Branch = 0;
           
          end


	4'b1001:// ADDI
            begin
        RegDst = 0;ALUSrc = 1;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1;ALUOp[0] = 1; Branch = 0;
              end
        
	4'b1010: // SUBI
              begin
	    RegDst = 0;ALUSrc = 1;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1;ALUOp[0] = 1; Branch = 0;
                end

	4'b1011: // SLTI
                begin
		RegDst = 0;ALUSrc = 1;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1;ALUOp[0] = 1; Branch = 0;    
                  end

	4'b1100: // LW
                  begin
		RegDst = 0;ALUSrc = 1;MemToReg = 1;RegWrite = 1;MemRead = 1;MemWrite = 0;ALUOp[1] = 0;ALUOp[0] = 0; Branch = 0;
                    end
    4'b1101: // SW
                    begin
		RegDst = 0;ALUSrc = 1;MemToReg = 0;RegWrite = 0;MemRead = 0;MemWrite = 1;ALUOp[1] = 0;ALUOp[0] = 0; Branch = 0;
                      end
        
    4'b1111: // BEQ
                      begin
		RegDst = 0;ALUSrc = 0;MemToReg = 0;RegWrite = 0;MemRead = 0;MemWrite = 0;ALUOp[1] = 0;ALUOp[0] = 1; Branch = 1;
                        end
    
    4'b0010: // sra??
		
              begin
        		RegDst = 0;ALUSrc = 0;MemToReg = 0;RegWrite = 1;MemRead = 0;MemWrite = 0;ALUOp[1] = 1; ALUOp[0] = 0;Branch = 0;
                end
	endcase
end

endmodule
             
              
module RegisterFile(
input wire[1:0] RS,
input wire[1:0] RT,
input wire[1:0] RD,
input wire[15:0] WriteData,
input wire RegWrite,
input wire Clock,
output wire[15:0] ReadRS,
output wire[15:0] ReadRT
);
    
reg[15:0] Registers[3:0];

//Reseto te gjithe regjistrat ne 0
integer i;
initial 
begin
  for(i=0;i<16;i=i+1) // e kena pas 4... !!!!!!!!!!!!!!!!!!!!!!!!!!!!!??!?!?!?!?!?!?!?!?!?!?
   Registers[i] <= 16'b0; 
end

//Shkruaj ne regjiter
always @(posedge Clock)
begin
  if(RegWrite) // u shtu
Registers[RD] <= WriteData;
end

//lexo regjistrat ReadData1, ReadData2
assign ReadRS = Registers[RS];
assign ReadRT = Registers[RT];

endmodule

module InstructionMemory(
input wire[15:0] PCAddress,
output wire[15:0] Instruction);

  reg[7:0] instrMem[127:0]; 

initial
$readmemb("instructionMemory.mem", instrMem);


assign Instruction[15:8] = instrMem[PCAddress];
assign Instruction[7:0] = instrMem[PCAddress + 16'd1];



endmodule
              

module Mbledhesi(
    input A,
    input B,
    input CIN,
    output Shuma,
    output COUT
    );
    
    assign Shuma = A ^ B ^ CIN;
    assign COUT = CIN & A | CIN & B | A & B;
endmodule

module mux2ne1(
    input Hyrja0,
    input Hyrja1,
    input S,
    output Dalja
    );
    
    assign Dalja = S ? Hyrja1 : Hyrja0;
endmodule

module mux8ne1(
    input Hyrja0,
    input Hyrja1,
    input Hyrja2,
    input Hyrja3,
    input Hyrja4,
    input Hyrja5,
    input Hyrja6,
    input Hyrja7,
    input [2:0] S,
    output Dalja
    );

assign Dalja = S[2] ? (S[1]? (S[0] ? Hyrja7 : Hyrja6) : (S[0] ? Hyrja5 : Hyrja4)) : (S[1] ? (S[0] ? Hyrja3 : Hyrja2) : (S[0] ? Hyrja1 : Hyrja0));
endmodule


// 000 0 ---- AND 
// 001 1 ---- SLTI
// 010 2 ---- OR
// 011 3 ---- XOR
// 100 4 ---- ADDSUB
// 101 5 ---- ADDISUBI
// 110 6 ---- SLL
// 111 7 ---- SRA


module ALU1(
    input A,
    input B,
    input CIN,
    input BInvert,
    input Less,
    input [2:0] Op,
    output Result,
    output CarryOut
    );
    
   wire JoA, JoB, mA, mB, dhe_teli, ose_teli, xor_teli, addsub_teli, addisubi_teli, slti_teli, sll_teli, sra_teli; 
   
   assign JoA = ~A;
   assign JoB = ~B;
   
   mux2ne1 muxB(B, JoB, BInvert, mB);
   
   assign dhe_teli = mA & mB;
   assign ose_teli = mA | mB;
   assign xor_teli = mA ^ mB;
   Mbledhesi AddSubFunct(A, mB, CIN, addsub_teli, CarryOut);
   //assign slti_tel = mA & mB;//ka ni modul per secilen
   //assign sll_teli = mA & mB;//ka ni modul per secilen
   //assign sra_teli = mA & mB;//ka ni modul per secilen
   
   
   
  mux8ne1 MuxiKryesor(dhe_teli, slti_teli, ose_teli, xor_teli, addsub_teli, Less, sll_teli, sra_teli, Op, Result);
    
    
endmodule


module ALU16(
    input [15:0] A,
    input [15:0] B,
    input BNegate,
    input [2:0] Op,
    output Zero,
    output [15:0] Result,
    output Overflow,
    output CarryOut
    );
    
    wire [14:0] COUT;
    //LIDH 16 ALU 1-biteshe
    ALU1 ALU0(A[0], B[0], BNegate, BNegate, Result[15], Op, Result[0], COUT[0]);
    ALU1 ALU1(A[1], B[1], COUT[0], BNegate, 0, Op, Result[1], COUT[1]);
    ALU1 ALU2(A[2], B[2], COUT[1], BNegate, 0, Op, Result[2], COUT[2]);
    ALU1 ALU3(A[3], B[3], COUT[2], BNegate, 0, Op, Result[3], COUT[3]);
    ALU1 ALU4(A[4], B[4], COUT[3], BNegate, 0, Op, Result[4], COUT[4]);
    ALU1 ALU5(A[5], B[5], COUT[4], BNegate, 0, Op, Result[5], COUT[5]);
    ALU1 ALU6(A[6], B[6], COUT[5], BNegate, 0, Op, Result[6], COUT[6]);
    ALU1 ALU7(A[7], B[7], COUT[6], BNegate, 0, Op, Result[7], COUT[7]);
    ALU1 ALU8(A[8], B[8], COUT[7], BNegate, 0, Op, Result[8], COUT[8]);
    ALU1 ALU9(A[9], B[9], COUT[8], BNegate, 0, Op, Result[9], COUT[9]);
    ALU1 ALU10(A[10], B[10], COUT[9], BNegate, 0, Op, Result[10], COUT[10]);
    ALU1 ALU11(A[11], B[11], COUT[10], BNegate, 0, Op, Result[11], COUT[11]);
    ALU1 ALU12(A[12], B[12], COUT[11], BNegate, 0, Op, Result[12], COUT[12]);
    ALU1 ALU13(A[13], B[13], COUT[12], BNegate, 0, Op, Result[13], COUT[13]);
    ALU1 ALU14(A[14], B[14], COUT[13], BNegate, 0, Op, Result[14], COUT[14]);
    ALU1 ALU15(A[15], B[15], COUT[14], BNegate, 0, Op, Result[15], CarryOut);

assign Zero = ~(Result[0] | Result[1] | 
                Result[2] | Result[3] | 
                Result[4] | Result[5] | 
                Result[6] | Result[7] | 
                Result[8] | Result[9] | 
                Result[10] | Result[11] | 
                Result[12] | Result[13] | 
                Result[14] | Result[15] ); 
                    
    assign Overflow = COUT[14] ^ CarryOut;
    
    
endmodule

module DataMemory(
input wire[15:0] Address,
input wire[15:0] WriteData,
input wire MemWrite,
input wire MemRead,
input wire Clock,
output wire[15:0] ReadData
);

  reg[7:0] dataMem[127:0]; 

initial
$readmemb("dataMemory.mem", dataMem);

always@(posedge Clock)
begin
    if(MemWrite) 
        begin
            
          dataMem[Address + 16'd0] <= WriteData[15:8];
          dataMem[Address + 16'd1] <= WriteData[7:0];
         end
end

always@(negedge Clock)
begin
$writememb("dataMemory.mem", dataMem);
end
 assign ReadData[15:8] = dataMem[Address + 16'd0];
 assign ReadData[7:0] = dataMem[Address + 16'd1];

endmodule